diff --git a/ac.scm b/ac.scm
index b16531f..39bc6f0 100644
--- a/ac.scm
+++ b/ac.scm
@@ -901,8 +901,10 @@
                   (hash-table-for-each table fn)
                   table))
 
-(xdef 'protect (lambda (during after)
-                  (dynamic-wind (lambda () #t) during after)))
+(define (protect during after)
+  (dynamic-wind (lambda () #t) during after))
+
+(xdef 'protect protect)
 
 ; need to use a better seed
 
@@ -1103,8 +1105,6 @@
 ; inside an atomic-invoke. atomic-invoke is allowed to
 ; nest within a thread; the thread-cell keeps track of
 ; whether this thread already holds the lock.
-; XXX make sure cell is set #f after an exception?
-; maybe it doesn't matter since thread will die?
 
 (define ar-the-sema (make-semaphore 1))
 
@@ -1115,12 +1115,13 @@
                            (ar-apply f '())
                            (begin
                              (thread-cell-set! ar-sema-cell #t)
-                             (let ((ret 
-                                    (call-with-semaphore
-                                     ar-the-sema
-                                     (lambda () (ar-apply f '())))))
-                               (thread-cell-set! ar-sema-cell #f)
-                               ret)))))
+			     (protect
+			      (lambda ()
+				(call-with-semaphore
+				 ar-the-sema
+				 (lambda () (ar-apply f '()))))
+			      (lambda ()
+				(thread-cell-set! ar-sema-cell #f)))))))
 
 (xdef 'dead (lambda (x) (tnil (thread-dead? x))))
 
